version: '3.8'
services:
  postgres:
    image: postgres:13.4  
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - "5432:5432"
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  ws_coinex:
    build: ./python
    restart: always
    environment:
      APIKEYCOINEX: ${APIKEYCOINEX}
      APISECRETKEYCOINEX: ${APISECRETKEYCOINEX}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
    command: ["python", "/app/scripts/ws_coinex.py"]
    volumes:
      - ./python:/app
    depends_on:
      postgres:
        condition: service_healthy

  ws_binance:
    build: ./python
    restart: always
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
    command: ["python", "/app/scripts/ws_binance.py"]
    volumes:
      - ./python:/app
    depends_on:
      postgres:
        condition: service_healthy


  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  nestjs:
    build: ./nestjs
    restart: always
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/coins/healthcheck"]
      interval: 2s    # Check every 30 seconds
      timeout: 2s     # Timeout after 10 seconds
      retries: 20       # Retry 5 times before marking it as unhealthy

  frontend:
    build: ./frontend
    restart: always
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy

  coin_list:
    build: ./python
    restart: always
    command: ["python", "/app/scripts/coin_list.py"]
    volumes:
      - ./python:/app
    depends_on:
      postgres:
        condition: service_healthy
      nestjs:
        condition: service_healthy
volumes:
  pgdata:

